(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{388:function(t,s,a){"use strict";a.r(s);var r=a(2),v=Object(r.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"进程和线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程和线程"}},[t._v("#")]),t._v(" 进程和线程")]),t._v(" "),a("p",[t._v("在介绍进程和线程之前，需要先了解一下什么是并行处理，因为如果你理解了并行处理的概念，那么再理解进程和线程之间的关系就会变得轻松许多。")]),t._v(" "),a("h2",{attrs:{id:"什么是并行处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是并行处理"}},[t._v("#")]),t._v(" 什么是并行处理")]),t._v(" "),a("p",[t._v("计算机中的并行处理就是同一时刻处理多个任务，比如我们要计算下面这三个表达式的值，并显示出结果。")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("C")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("在编写代码的时候，我们可以把这个过程拆分为四个任务：")]),t._v(" "),a("ul",[a("li",[t._v("任务 1 是计算 A=1+2；")]),t._v(" "),a("li",[t._v("任务 2 是计算 B=20/5；")]),t._v(" "),a("li",[t._v("任务 3 是计算 C=7*8；")]),t._v(" "),a("li",[t._v("任务 4 是显示最后计算的结果。")])]),t._v(" "),a("p",[t._v("正常情况下程序可以使用"),a("strong",[t._v("单线程")]),t._v("来处理，也就是分四步按照顺序分别执行这四个任务。")]),t._v(" "),a("p",[t._v("如果采用"),a("strong",[t._v("多线程")]),t._v("，会怎么样呢？我们只需分“两步走”：第一步，使用三个线程同时执行前三个任务；第二步，再执行第四个显示任务。")]),t._v(" "),a("p",[t._v("通过对比分析，你会发现用单线程执行需要四步，而使用多线程只需要两步。因此，"),a("strong",[t._v("使用并行处理能大大提升性能。")])]),t._v(" "),a("h2",{attrs:{id:"线程-vs-进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程-vs-进程"}},[t._v("#")]),t._v(" 线程 VS 进程")]),t._v(" "),a("p",[t._v("多线程可以并行处理任务，但是"),a("strong",[t._v("线程是不能单独存在的，它是由进程来启动和管理")]),t._v("的。那什么又是进程呢？")]),t._v(" "),a("p",[a("strong",[t._v("一个进程就是一个程序的运行实例。"),a("strong",[t._v("详细解释就是，启动一个程序的时候，操作系统会为该程序创建一块内存，用来存放代码、运行中的数据和一个执行任务的主线程，我们把这样的一个运行环境叫")]),t._v("进程")]),t._v("。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://s1.ax1x.com/2020/04/13/GXpuWj.png",alt:"GXpuWj.png"}})]),t._v(" "),a("p",[t._v("从图中可以看到，"),a("strong",[t._v("线程是依附于进程的，而进程中使用多线程并行处理能提升运算效率。")])]),t._v(" "),a("h2",{attrs:{id:"四个特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四个特点"}},[t._v("#")]),t._v(" 四个特点")]),t._v(" "),a("p",[t._v("总结来说，进程和线程之间的关系有以下 4 个特点。")]),t._v(" "),a("h3",{attrs:{id:"进程中的任意一线程执行出错，都会导致整个进程的崩溃"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程中的任意一线程执行出错，都会导致整个进程的崩溃"}},[t._v("#")]),t._v(" 进程中的任意一线程执行出错，都会导致整个进程的崩溃")]),t._v(" "),a("h3",{attrs:{id:"线程之间共享进程中的数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程之间共享进程中的数据"}},[t._v("#")]),t._v(" 线程之间共享进程中的数据")]),t._v(" "),a("p",[t._v("线程之间可以对进程的公共数据进行读写操作。")]),t._v(" "),a("h3",{attrs:{id:"当一个进程关闭之后，操作系统会回收进程所占用的内存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#当一个进程关闭之后，操作系统会回收进程所占用的内存"}},[t._v("#")]),t._v(" 当一个进程关闭之后，操作系统会回收进程所占用的内存")]),t._v(" "),a("p",[t._v("当一个进程退出时，操作系统会回收该进程所申请的所有资源；即使其中任意线程因为操作不当导致内存泄漏，当进程退出时，这些内存也会被正确回收。")]),t._v(" "),a("p",[t._v("比如之前的 IE 浏览器，支持很多插件，而这些插件很容易导致内存泄漏，这意味着只要浏览器开着，内存占用就有可能会越来越多，但是当关闭浏览器进程时，这些内存就都会被系统回收掉。")]),t._v(" "),a("h3",{attrs:{id:"进程之间的内容相互隔离"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程之间的内容相互隔离"}},[t._v("#")]),t._v(" 进程之间的内容相互隔离")]),t._v(" "),a("p",[t._v("进程隔离是为保护操作系统中进程互不干扰的技术，每一个进程只能访问自己占有的数据，也就避免出现进程 A 写入数据到进程 B 的情况。")]),t._v(" "),a("p",[t._v("正是因为进程之间的数据是严格隔离的，所以一个进程如果崩溃了，或者挂起了，是不会影响到其他进程的。如果进程之间需要进行数据的通信，这时候，就需要使用用于"),a("strong",[t._v("进程间通信（IPC）的机制")]),t._v("了。")]),t._v(" "),a("h2",{attrs:{id:"浏览器多进程架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器多进程架构"}},[t._v("#")]),t._v(" 浏览器多进程架构")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://s1.ax1x.com/2020/04/13/GXCAIS.png",alt:"GXCAIS.png"}})]),t._v(" "),a("p",[t._v("从图中可以看出，最新的 Chrome 浏览器包括：1 个浏览器（Browser）主进程、1 个 GPU 进程、1 个网络（NetWork）进程、多个渲染进程和多个插件进程。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("浏览器进程")]),t._v("。主要负责界面显示、用户交互、子进程管理，同时提供存储等功能。")]),t._v(" "),a("li",[a("strong",[t._v("渲染进程")]),t._v("。核心任务是将 HTML、CSS 和 JavaScript 转换为用户可以与之交互的网页，排版引擎 Blink 和 JavaScript 引擎 V8 都是运行在该进程中，默认情况下，Chrome 会为每个 Tab 标签创建一个渲染进程。出于安全考虑，渲染进程都是运行在沙箱模式下。")]),t._v(" "),a("li",[a("strong",[t._v("GPU 进程")]),t._v("。其实，Chrome 刚开始发布的时候是没有 GPU 进程的。而 GPU 的使用初衷是为了实现 3D CSS 的效果，只是随后网页、Chrome 的 UI 界面都选择采用 GPU 来绘制，这使得 GPU 成为浏览器普遍的需求。最后，Chrome 在其多进程架构上也引入了 GPU 进程。")]),t._v(" "),a("li",[a("strong",[t._v("网络进程")]),t._v("。主要负责页面的网络资源加载，之前是作为一个模块运行在浏览器进程里面的，直至最近才独立出来，成为一个单独的进程。")]),t._v(" "),a("li",[a("strong",[t._v("插件进程")]),t._v("。主要是负责插件的运行，因插件易崩溃，所以需要通过插件进程来隔离，以保证插件进程崩溃不会对浏览器和页面造成影响。")])]),t._v(" "),a("h2",{attrs:{id:"多进程浏览器存在的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多进程浏览器存在的问题"}},[t._v("#")]),t._v(" 多进程浏览器存在的问题")]),t._v(" "),a("p",[t._v("虽然多进程模型提升了浏览器的稳定性、流畅性和安全性，但同样不可避免地带来了一些问题：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("更高的资源占用")]),t._v("。因为每个进程都会包含公共基础结构的副本（如 JavaScript 运行环境），这就意味着浏览器会消耗更多的内存资源。")]),t._v(" "),a("li",[a("strong",[t._v("更复杂的体系架构")]),t._v("。浏览器各模块之间耦合性高、扩展性差等问题，会导致现在的架构已经很难适应新的需求了。")])])])}),[],!1,null,null,null);s.default=v.exports}}]);